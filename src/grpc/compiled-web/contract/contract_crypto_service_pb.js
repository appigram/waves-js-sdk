// source: contract/contract_crypto_service.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_wrappers_pb = require('google-protobuf/google/protobuf/wrappers_pb.js');
goog.object.extend(proto, google_protobuf_wrappers_pb);
var constants_pb = require('../constants_pb.js');
goog.object.extend(proto, constants_pb);
goog.exportSymbol('proto.wavesenterprise.DecryptDataRequest', null, global);
goog.exportSymbol('proto.wavesenterprise.DecryptDataResponse', null, global);
goog.exportSymbol('proto.wavesenterprise.EncryptDataRequest', null, global);
goog.exportSymbol('proto.wavesenterprise.EncryptSeparateResponse', null, global);
goog.exportSymbol('proto.wavesenterprise.EncryptedForManyResponse', null, global);
goog.exportSymbol('proto.wavesenterprise.EncryptedSingleResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wavesenterprise.EncryptDataRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.wavesenterprise.EncryptDataRequest.repeatedFields_, null);
};
goog.inherits(proto.wavesenterprise.EncryptDataRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wavesenterprise.EncryptDataRequest.displayName = 'proto.wavesenterprise.EncryptDataRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wavesenterprise.EncryptedSingleResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.wavesenterprise.EncryptedSingleResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wavesenterprise.EncryptedSingleResponse.displayName = 'proto.wavesenterprise.EncryptedSingleResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wavesenterprise.EncryptSeparateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.wavesenterprise.EncryptSeparateResponse.repeatedFields_, null);
};
goog.inherits(proto.wavesenterprise.EncryptSeparateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wavesenterprise.EncryptSeparateResponse.displayName = 'proto.wavesenterprise.EncryptSeparateResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wavesenterprise.EncryptedForManyResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.wavesenterprise.EncryptedForManyResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wavesenterprise.EncryptedForManyResponse.displayName = 'proto.wavesenterprise.EncryptedForManyResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wavesenterprise.DecryptDataRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.wavesenterprise.DecryptDataRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wavesenterprise.DecryptDataRequest.displayName = 'proto.wavesenterprise.DecryptDataRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wavesenterprise.DecryptDataResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.wavesenterprise.DecryptDataResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wavesenterprise.DecryptDataResponse.displayName = 'proto.wavesenterprise.DecryptDataResponse';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.wavesenterprise.EncryptDataRequest.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wavesenterprise.EncryptDataRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.wavesenterprise.EncryptDataRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wavesenterprise.EncryptDataRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wavesenterprise.EncryptDataRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sender: jspb.Message.getFieldWithDefault(msg, 1, ""),
    password: (f = msg.getPassword()) && google_protobuf_wrappers_pb.StringValue.toObject(includeInstance, f),
    encryptionData: msg.getEncryptionData_asB64(),
    recipientsPublicKeysList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    cryptoAlgo: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wavesenterprise.EncryptDataRequest}
 */
proto.wavesenterprise.EncryptDataRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wavesenterprise.EncryptDataRequest;
  return proto.wavesenterprise.EncryptDataRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wavesenterprise.EncryptDataRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wavesenterprise.EncryptDataRequest}
 */
proto.wavesenterprise.EncryptDataRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSender(value);
      break;
    case 2:
      var value = new google_protobuf_wrappers_pb.StringValue;
      reader.readMessage(value,google_protobuf_wrappers_pb.StringValue.deserializeBinaryFromReader);
      msg.setPassword(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEncryptionData(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addRecipientsPublicKeys(value);
      break;
    case 5:
      var value = /** @type {!proto.wavesenterprise.CryptoAlgo} */ (reader.readEnum());
      msg.setCryptoAlgo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wavesenterprise.EncryptDataRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wavesenterprise.EncryptDataRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wavesenterprise.EncryptDataRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wavesenterprise.EncryptDataRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSender();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPassword();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_wrappers_pb.StringValue.serializeBinaryToWriter
    );
  }
  f = message.getEncryptionData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getRecipientsPublicKeysList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getCryptoAlgo();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * optional string sender = 1;
 * @return {string}
 */
proto.wavesenterprise.EncryptDataRequest.prototype.getSender = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.wavesenterprise.EncryptDataRequest} returns this
 */
proto.wavesenterprise.EncryptDataRequest.prototype.setSender = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.StringValue password = 2;
 * @return {?proto.google.protobuf.StringValue}
 */
proto.wavesenterprise.EncryptDataRequest.prototype.getPassword = function() {
  return /** @type{?proto.google.protobuf.StringValue} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.StringValue, 2));
};


/**
 * @param {?proto.google.protobuf.StringValue|undefined} value
 * @return {!proto.wavesenterprise.EncryptDataRequest} returns this
*/
proto.wavesenterprise.EncryptDataRequest.prototype.setPassword = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.wavesenterprise.EncryptDataRequest} returns this
 */
proto.wavesenterprise.EncryptDataRequest.prototype.clearPassword = function() {
  return this.setPassword(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.wavesenterprise.EncryptDataRequest.prototype.hasPassword = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes encryption_data = 3;
 * @return {!(string|Uint8Array)}
 */
proto.wavesenterprise.EncryptDataRequest.prototype.getEncryptionData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes encryption_data = 3;
 * This is a type-conversion wrapper around `getEncryptionData()`
 * @return {string}
 */
proto.wavesenterprise.EncryptDataRequest.prototype.getEncryptionData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEncryptionData()));
};


/**
 * optional bytes encryption_data = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEncryptionData()`
 * @return {!Uint8Array}
 */
proto.wavesenterprise.EncryptDataRequest.prototype.getEncryptionData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEncryptionData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.wavesenterprise.EncryptDataRequest} returns this
 */
proto.wavesenterprise.EncryptDataRequest.prototype.setEncryptionData = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * repeated string recipients_public_keys = 4;
 * @return {!Array<string>}
 */
proto.wavesenterprise.EncryptDataRequest.prototype.getRecipientsPublicKeysList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.wavesenterprise.EncryptDataRequest} returns this
 */
proto.wavesenterprise.EncryptDataRequest.prototype.setRecipientsPublicKeysList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.wavesenterprise.EncryptDataRequest} returns this
 */
proto.wavesenterprise.EncryptDataRequest.prototype.addRecipientsPublicKeys = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.wavesenterprise.EncryptDataRequest} returns this
 */
proto.wavesenterprise.EncryptDataRequest.prototype.clearRecipientsPublicKeysList = function() {
  return this.setRecipientsPublicKeysList([]);
};


/**
 * optional CryptoAlgo crypto_algo = 5;
 * @return {!proto.wavesenterprise.CryptoAlgo}
 */
proto.wavesenterprise.EncryptDataRequest.prototype.getCryptoAlgo = function() {
  return /** @type {!proto.wavesenterprise.CryptoAlgo} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.wavesenterprise.CryptoAlgo} value
 * @return {!proto.wavesenterprise.EncryptDataRequest} returns this
 */
proto.wavesenterprise.EncryptDataRequest.prototype.setCryptoAlgo = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wavesenterprise.EncryptedSingleResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.wavesenterprise.EncryptedSingleResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wavesenterprise.EncryptedSingleResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wavesenterprise.EncryptedSingleResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    encryptedData: msg.getEncryptedData_asB64(),
    publicKey: jspb.Message.getFieldWithDefault(msg, 2, ""),
    wrappedKey: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wavesenterprise.EncryptedSingleResponse}
 */
proto.wavesenterprise.EncryptedSingleResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wavesenterprise.EncryptedSingleResponse;
  return proto.wavesenterprise.EncryptedSingleResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wavesenterprise.EncryptedSingleResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wavesenterprise.EncryptedSingleResponse}
 */
proto.wavesenterprise.EncryptedSingleResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEncryptedData(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPublicKey(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setWrappedKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wavesenterprise.EncryptedSingleResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wavesenterprise.EncryptedSingleResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wavesenterprise.EncryptedSingleResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wavesenterprise.EncryptedSingleResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEncryptedData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getPublicKey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getWrappedKey();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional bytes encrypted_data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.wavesenterprise.EncryptedSingleResponse.prototype.getEncryptedData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes encrypted_data = 1;
 * This is a type-conversion wrapper around `getEncryptedData()`
 * @return {string}
 */
proto.wavesenterprise.EncryptedSingleResponse.prototype.getEncryptedData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEncryptedData()));
};


/**
 * optional bytes encrypted_data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEncryptedData()`
 * @return {!Uint8Array}
 */
proto.wavesenterprise.EncryptedSingleResponse.prototype.getEncryptedData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEncryptedData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.wavesenterprise.EncryptedSingleResponse} returns this
 */
proto.wavesenterprise.EncryptedSingleResponse.prototype.setEncryptedData = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string public_key = 2;
 * @return {string}
 */
proto.wavesenterprise.EncryptedSingleResponse.prototype.getPublicKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.wavesenterprise.EncryptedSingleResponse} returns this
 */
proto.wavesenterprise.EncryptedSingleResponse.prototype.setPublicKey = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string wrapped_key = 3;
 * @return {string}
 */
proto.wavesenterprise.EncryptedSingleResponse.prototype.getWrappedKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.wavesenterprise.EncryptedSingleResponse} returns this
 */
proto.wavesenterprise.EncryptedSingleResponse.prototype.setWrappedKey = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.wavesenterprise.EncryptSeparateResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wavesenterprise.EncryptSeparateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.wavesenterprise.EncryptSeparateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wavesenterprise.EncryptSeparateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wavesenterprise.EncryptSeparateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    responsesList: jspb.Message.toObjectList(msg.getResponsesList(),
    proto.wavesenterprise.EncryptedSingleResponse.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wavesenterprise.EncryptSeparateResponse}
 */
proto.wavesenterprise.EncryptSeparateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wavesenterprise.EncryptSeparateResponse;
  return proto.wavesenterprise.EncryptSeparateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wavesenterprise.EncryptSeparateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wavesenterprise.EncryptSeparateResponse}
 */
proto.wavesenterprise.EncryptSeparateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.wavesenterprise.EncryptedSingleResponse;
      reader.readMessage(value,proto.wavesenterprise.EncryptedSingleResponse.deserializeBinaryFromReader);
      msg.addResponses(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wavesenterprise.EncryptSeparateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wavesenterprise.EncryptSeparateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wavesenterprise.EncryptSeparateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wavesenterprise.EncryptSeparateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponsesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.wavesenterprise.EncryptedSingleResponse.serializeBinaryToWriter
    );
  }
};


/**
 * repeated EncryptedSingleResponse responses = 1;
 * @return {!Array<!proto.wavesenterprise.EncryptedSingleResponse>}
 */
proto.wavesenterprise.EncryptSeparateResponse.prototype.getResponsesList = function() {
  return /** @type{!Array<!proto.wavesenterprise.EncryptedSingleResponse>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.wavesenterprise.EncryptedSingleResponse, 1));
};


/**
 * @param {!Array<!proto.wavesenterprise.EncryptedSingleResponse>} value
 * @return {!proto.wavesenterprise.EncryptSeparateResponse} returns this
*/
proto.wavesenterprise.EncryptSeparateResponse.prototype.setResponsesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.wavesenterprise.EncryptedSingleResponse=} opt_value
 * @param {number=} opt_index
 * @return {!proto.wavesenterprise.EncryptedSingleResponse}
 */
proto.wavesenterprise.EncryptSeparateResponse.prototype.addResponses = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.wavesenterprise.EncryptedSingleResponse, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.wavesenterprise.EncryptSeparateResponse} returns this
 */
proto.wavesenterprise.EncryptSeparateResponse.prototype.clearResponsesList = function() {
  return this.setResponsesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wavesenterprise.EncryptedForManyResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.wavesenterprise.EncryptedForManyResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wavesenterprise.EncryptedForManyResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wavesenterprise.EncryptedForManyResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    encryptedData: msg.getEncryptedData_asB64(),
    recipientToWrappedStructureMap: (f = msg.getRecipientToWrappedStructureMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wavesenterprise.EncryptedForManyResponse}
 */
proto.wavesenterprise.EncryptedForManyResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wavesenterprise.EncryptedForManyResponse;
  return proto.wavesenterprise.EncryptedForManyResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wavesenterprise.EncryptedForManyResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wavesenterprise.EncryptedForManyResponse}
 */
proto.wavesenterprise.EncryptedForManyResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEncryptedData(value);
      break;
    case 2:
      var value = msg.getRecipientToWrappedStructureMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wavesenterprise.EncryptedForManyResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wavesenterprise.EncryptedForManyResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wavesenterprise.EncryptedForManyResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wavesenterprise.EncryptedForManyResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEncryptedData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getRecipientToWrappedStructureMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional bytes encrypted_data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.wavesenterprise.EncryptedForManyResponse.prototype.getEncryptedData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes encrypted_data = 1;
 * This is a type-conversion wrapper around `getEncryptedData()`
 * @return {string}
 */
proto.wavesenterprise.EncryptedForManyResponse.prototype.getEncryptedData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEncryptedData()));
};


/**
 * optional bytes encrypted_data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEncryptedData()`
 * @return {!Uint8Array}
 */
proto.wavesenterprise.EncryptedForManyResponse.prototype.getEncryptedData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEncryptedData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.wavesenterprise.EncryptedForManyResponse} returns this
 */
proto.wavesenterprise.EncryptedForManyResponse.prototype.setEncryptedData = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * map<string, string> recipient_to_wrapped_structure = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.wavesenterprise.EncryptedForManyResponse.prototype.getRecipientToWrappedStructureMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.wavesenterprise.EncryptedForManyResponse} returns this
 */
proto.wavesenterprise.EncryptedForManyResponse.prototype.clearRecipientToWrappedStructureMap = function() {
  this.getRecipientToWrappedStructureMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wavesenterprise.DecryptDataRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.wavesenterprise.DecryptDataRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wavesenterprise.DecryptDataRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wavesenterprise.DecryptDataRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    recipient: jspb.Message.getFieldWithDefault(msg, 1, ""),
    password: (f = msg.getPassword()) && google_protobuf_wrappers_pb.StringValue.toObject(includeInstance, f),
    encryptedData: msg.getEncryptedData_asB64(),
    wrappedKey: jspb.Message.getFieldWithDefault(msg, 4, ""),
    senderPublicKey: jspb.Message.getFieldWithDefault(msg, 5, ""),
    cryptoAlgo: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wavesenterprise.DecryptDataRequest}
 */
proto.wavesenterprise.DecryptDataRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wavesenterprise.DecryptDataRequest;
  return proto.wavesenterprise.DecryptDataRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wavesenterprise.DecryptDataRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wavesenterprise.DecryptDataRequest}
 */
proto.wavesenterprise.DecryptDataRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRecipient(value);
      break;
    case 2:
      var value = new google_protobuf_wrappers_pb.StringValue;
      reader.readMessage(value,google_protobuf_wrappers_pb.StringValue.deserializeBinaryFromReader);
      msg.setPassword(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEncryptedData(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setWrappedKey(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSenderPublicKey(value);
      break;
    case 6:
      var value = /** @type {!proto.wavesenterprise.CryptoAlgo} */ (reader.readEnum());
      msg.setCryptoAlgo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wavesenterprise.DecryptDataRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wavesenterprise.DecryptDataRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wavesenterprise.DecryptDataRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wavesenterprise.DecryptDataRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecipient();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPassword();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_wrappers_pb.StringValue.serializeBinaryToWriter
    );
  }
  f = message.getEncryptedData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getWrappedKey();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSenderPublicKey();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCryptoAlgo();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
};


/**
 * optional string recipient = 1;
 * @return {string}
 */
proto.wavesenterprise.DecryptDataRequest.prototype.getRecipient = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.wavesenterprise.DecryptDataRequest} returns this
 */
proto.wavesenterprise.DecryptDataRequest.prototype.setRecipient = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.StringValue password = 2;
 * @return {?proto.google.protobuf.StringValue}
 */
proto.wavesenterprise.DecryptDataRequest.prototype.getPassword = function() {
  return /** @type{?proto.google.protobuf.StringValue} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.StringValue, 2));
};


/**
 * @param {?proto.google.protobuf.StringValue|undefined} value
 * @return {!proto.wavesenterprise.DecryptDataRequest} returns this
*/
proto.wavesenterprise.DecryptDataRequest.prototype.setPassword = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.wavesenterprise.DecryptDataRequest} returns this
 */
proto.wavesenterprise.DecryptDataRequest.prototype.clearPassword = function() {
  return this.setPassword(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.wavesenterprise.DecryptDataRequest.prototype.hasPassword = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes encrypted_data = 3;
 * @return {!(string|Uint8Array)}
 */
proto.wavesenterprise.DecryptDataRequest.prototype.getEncryptedData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes encrypted_data = 3;
 * This is a type-conversion wrapper around `getEncryptedData()`
 * @return {string}
 */
proto.wavesenterprise.DecryptDataRequest.prototype.getEncryptedData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEncryptedData()));
};


/**
 * optional bytes encrypted_data = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEncryptedData()`
 * @return {!Uint8Array}
 */
proto.wavesenterprise.DecryptDataRequest.prototype.getEncryptedData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEncryptedData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.wavesenterprise.DecryptDataRequest} returns this
 */
proto.wavesenterprise.DecryptDataRequest.prototype.setEncryptedData = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional string wrapped_key = 4;
 * @return {string}
 */
proto.wavesenterprise.DecryptDataRequest.prototype.getWrappedKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.wavesenterprise.DecryptDataRequest} returns this
 */
proto.wavesenterprise.DecryptDataRequest.prototype.setWrappedKey = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string sender_public_key = 5;
 * @return {string}
 */
proto.wavesenterprise.DecryptDataRequest.prototype.getSenderPublicKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.wavesenterprise.DecryptDataRequest} returns this
 */
proto.wavesenterprise.DecryptDataRequest.prototype.setSenderPublicKey = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional CryptoAlgo crypto_algo = 6;
 * @return {!proto.wavesenterprise.CryptoAlgo}
 */
proto.wavesenterprise.DecryptDataRequest.prototype.getCryptoAlgo = function() {
  return /** @type {!proto.wavesenterprise.CryptoAlgo} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.wavesenterprise.CryptoAlgo} value
 * @return {!proto.wavesenterprise.DecryptDataRequest} returns this
 */
proto.wavesenterprise.DecryptDataRequest.prototype.setCryptoAlgo = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wavesenterprise.DecryptDataResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.wavesenterprise.DecryptDataResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wavesenterprise.DecryptDataResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wavesenterprise.DecryptDataResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    decryptedData: msg.getDecryptedData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wavesenterprise.DecryptDataResponse}
 */
proto.wavesenterprise.DecryptDataResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wavesenterprise.DecryptDataResponse;
  return proto.wavesenterprise.DecryptDataResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wavesenterprise.DecryptDataResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wavesenterprise.DecryptDataResponse}
 */
proto.wavesenterprise.DecryptDataResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDecryptedData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wavesenterprise.DecryptDataResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wavesenterprise.DecryptDataResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wavesenterprise.DecryptDataResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wavesenterprise.DecryptDataResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDecryptedData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes decrypted_data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.wavesenterprise.DecryptDataResponse.prototype.getDecryptedData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes decrypted_data = 1;
 * This is a type-conversion wrapper around `getDecryptedData()`
 * @return {string}
 */
proto.wavesenterprise.DecryptDataResponse.prototype.getDecryptedData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDecryptedData()));
};


/**
 * optional bytes decrypted_data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDecryptedData()`
 * @return {!Uint8Array}
 */
proto.wavesenterprise.DecryptDataResponse.prototype.getDecryptedData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDecryptedData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.wavesenterprise.DecryptDataResponse} returns this
 */
proto.wavesenterprise.DecryptDataResponse.prototype.setDecryptedData = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


goog.object.extend(exports, proto.wavesenterprise);
